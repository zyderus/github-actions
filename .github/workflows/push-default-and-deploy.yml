name: Push Default and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4.1.0
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore "${{github.workspace}}/src/my-web-app.sln"

      - name: Build
        run: dotnet build "${{github.workspace}}/src/my-web-app.sln"  --no-restore --configuration Release

      - name: Test
        run: dotnet test "${{github.workspace}}/src/my-web-app.sln" --no-restore --logger:"junit;LogFilePath=${{ github.workspace }}/results/test-results.xml"

      # create a test summary markdown file
      # if you don't specify an output file, it will automatically add
      # as a job summary. If you specify an output file, you have to
      # create your own step of adding it to the job summary. I am
      # intentionally doing that to show job summaries
      - name: Create test summary
        uses: test-summary/action@v2.4
        with:
          paths: ${{ github.workspace }}/results/*.xml
          output: ${{ github.workspace }}/results/summary.md
          show: 'all'
        if: always()

      # I am adding the test results to the Job Summary
      - name: Add Test Results To Job Summary
        run: |
          echo "TEST RESULTS:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          cat "${{ github.workspace }}/results/summary.md" >> $GITHUB_STEP_SUMMARY
        if: always()

      - name: Publish
        run: dotnet publish "${{github.workspace}}/src/my-web-app/my-web-app.csproj" -c Release -o mywebapp

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp
          path: mywebapp/**
          if-no-files-found: error

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment:
      name: DEV
      url: http://my-web-app-please-work-dev.azurewebsites.net/

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp
          path: myapp

      - name: Prove to myself the files are there
        run: |
          ls -la
          ls -la myapp

      - name: Login to Azure
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.WEB_APP_NAME }}
          slot-name: dev
          package: myapp

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment:
      name: STAGING
      url: http://my-web-app-please-work-staging.azurewebsites.net/

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp
          path: myapp

      - name: Login to Azure
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.WEB_APP_NAME }}
          slot-name: staging
          package: myapp

  deploy-to-prod:
    runs-on: ubuntu-latest
    needs:
      - deploy-to-dev
      - deploy-to-staging
    environment:
      name: PROD
      url: http://my-web-app-please-work-prod.azurewebsites.net/

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myapp
          path: myapp

      - name: Login to Azure
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.WEB_APP_NAME }}
          slot-name: prod
          package: myapp
